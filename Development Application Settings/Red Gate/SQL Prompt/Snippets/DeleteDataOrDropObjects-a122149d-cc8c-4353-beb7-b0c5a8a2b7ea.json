{
  "id": "a122149d-cc8c-4353-beb7-b0c5a8a2b7ea",
  "prefix": "DeleteDataOrDropObjects",
  "description": "KM: This script deletes data or drop objects without worrying about constraints by deleting in a specific table order. The script also allows you to delete any or all the SQL Server objects.",
  "body": "/**********************************************************************************************************************\r\n** Description: This script allows the deletion of SQL Server table data without worrying about constraints by deleting \r\n**              in a specific table order. The script also allows you to delete any or all the SQL Server objects like \r\n**              tables, views, stored procedures, functions, user data types, sequences, and synonyms.\r\n**\r\n** Usage:       Use the changeable variables below to either delete table data or drop database objects.\r\n**\r\n**              Expected SQL Server and Database name validation\r\n**               Update the variables @ExpectedSQLServerName & @ExpectedDatabaseName to validate this script executes\r\n**               only on the SQL Server instance and database you are intending.\r\n**\r\n**              Deleting Table Data\r\n**               To delete all the rows in all the database tables set the variable @DeleteData = 1.\r\n**               If you also want to reset all the identity columns so the next inserted row is 1, set the variable \r\n**               @ReseedTableIdentity = 1.\r\n**\r\n**              Dropping/Deleting Database Objects\r\n**               Each database object you might want to drop has its own variable. These variables names start with \r\n**               \"@Drop\" like @DropTables. So if you want to drop all the database tables you would set the variable\r\n**               @DropTables = 1.\r\n**\r\n** Notes:       There is no need to set @DeleteData = 1 if you are also setting @DropTables = 1. It will be extra \r\n**              unneeded work.\r\n**********************************************************************************************************************/\r\n\r\n/* Changeable Variables Start */\r\n\r\nDECLARE @ExpectedSQLServerName nvarchar(128) = N'[SQL-SERVER-NAME]';\r\nDECLARE @ExpectedDatabaseName nvarchar(128) = N'[DATABASE-NAME]';\r\n\r\nDECLARE @DeleteData bit = 0; /* 1=deletes data in all tables */\r\nDECLARE @ReseedTableIdentity bit = 0; /* 1=Reseed the identity columns seed value to zero */\r\n\r\nDECLARE @DropTables bit = 0; /* 1=drops all tables */\r\nDECLARE @DropViews bit = 0; /* 1=drops all views */\r\nDECLARE @DropStoredProcedures bit = 0; /* 1=drops all stored procedures */\r\nDECLARE @DropFunctions bit = 0; /* 1=drops non CLR functions */\r\nDECLARE @DropUserDefinedDataTypes bit = 0; /* 1=drops all user defined data and table types */\r\nDECLARE @DropSequences bit = 0; /* 1=drops all sequences */\r\nDECLARE @DropSynonyms bit = 0; /* 1=drops all synonyms */\r\n\r\n/* Changeable Variables End*/\r\n\r\n\r\nSET NOCOUNT ON;\r\n\r\nIF (SELECT @@SERVERNAME) <> @ExpectedSQLServerName\r\nOR DB_NAME() <> @ExpectedDatabaseName\r\n    BEGIN\r\n        RAISERROR(N'Error: This script is not being run on the correct SQL Server instance or in the correct database.', 16, 1) WITH NOWAIT;\r\n        RETURN;\r\n    END;\r\nELSE\r\n    BEGIN\r\n        RAISERROR(N'Passed SQL Server and database name validation.', 0, 1) WITH NOWAIT;\r\n\r\n        /* Declare some variables for use later */\r\n        DECLARE @SQLStatement nvarchar(MAX) = N'';\r\n        DECLARE @NewLineString nvarchar(MAX) = CAST(CHAR(13) + CHAR(10) AS nvarchar(MAX));\r\n\r\n        /* Create a temporary table to store tables we will be doing things to below */\r\n        DROP TABLE IF EXISTS #Table;\r\n        CREATE TABLE #Table (\r\n            SchemaName          nvarchar(128) NOT NULL\r\n           ,TableName           nvarchar(128) NOT NULL\r\n           ,IsTemporalTableFlag tinyint       NOT NULL\r\n           ,TemporalSchemaName  nvarchar(128) NULL\r\n           ,TemporalTableName   nvarchar(128) NULL\r\n        );\r\n\r\n        /* Find all the table and temporal metadata */\r\n        INSERT INTO #Table (SchemaName, TableName, IsTemporalTableFlag, TemporalSchemaName, TemporalTableName)\r\n        SELECT\r\n            SchemaName          = S.name\r\n           ,TableName           = T.name\r\n           ,IsTemporalTableFlag = T.temporal_type\r\n           ,TemporalSchemaName  = TS.name\r\n           ,TemporalTableName   = TT.name\r\n        FROM\r\n            sys.tables              AS T\r\n        INNER JOIN sys.schemas      AS S ON T.schema_id         = S.schema_id\r\n        LEFT OUTER JOIN sys.tables  AS TT ON T.history_table_id = TT.object_id\r\n        LEFT OUTER JOIN sys.schemas AS TS ON TT.schema_id       = TS.schema_id;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Disable all check constraints on all tables \r\n        **********************************************************************************************************************/\r\n        SELECT\r\n            @SQLStatement = @SQLStatement + COALESCE(N'ALTER TABLE ' + SchemaName + '.' + TableName + N' NOCHECK CONSTRAINT ALL;', N'') + @NewLineString\r\n        FROM\r\n            #Table;\r\n\r\n        EXECUTE sys.sp_executesql @SQLStatement;\r\n        --PRINT @SQLStatement;\r\n        SET @SQLStatement = N'';\r\n\r\n        /**********************************************************************************************************************\r\n        ** Disable all triggers on all tables\r\n        **********************************************************************************************************************/\r\n        SELECT\r\n            @SQLStatement = @SQLStatement + COALESCE(N'DISABLE TRIGGER ALL ON ' + SchemaName + '.' + TableName + N';', N'') + @NewLineString\r\n        FROM\r\n            #Table;\r\n\r\n        EXECUTE sys.sp_executesql @SQLStatement;\r\n        --PRINT @SQLStatement;\r\n        SET @SQLStatement = N'';\r\n\r\n        /**********************************************************************************************************************\r\n        ** Disable Temporal Table\r\n        **********************************************************************************************************************/\r\n        SELECT\r\n            @SQLStatement = @SQLStatement + COALESCE(N'ALTER TABLE ' + SchemaName + '.' + TableName + N' SET (SYSTEM_VERSIONING = OFF);', N'') + @NewLineString\r\n        FROM\r\n            #Table\r\n        WHERE\r\n            IsTemporalTableFlag = 2;\r\n\r\n        EXECUTE sys.sp_executesql @SQLStatement;\r\n        --PRINT @SQLStatement;\r\n        SET @SQLStatement = N'';\r\n\r\n        /**********************************************************************************************************************\r\n        ** Delete all data from all tables\r\n        **********************************************************************************************************************/\r\n        IF @DeleteData = 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'DELETE FROM ' + SchemaName + N'.' + TableName + N' WITH (TABLOCKX);', N'') + @NewLineString\r\n                FROM\r\n                    #Table;\r\n\r\n                SET @SQLStatement = N'SET NOCOUNT ON; ' + @NewLineString + @SQLStatement;\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Drop all views\r\n        **********************************************************************************************************************/\r\n        IF @DropViews = 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'DROP VIEW ' + S.name + N'.' + V.name + N';', N'') + @NewLineString\r\n                FROM\r\n                    sys.views          AS V\r\n                INNER JOIN sys.schemas AS S ON V.schema_id = S.schema_id\r\n                WHERE\r\n                    V.is_ms_shipped <> 1;\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Drop all stored procedures\r\n        **********************************************************************************************************************/\r\n        IF @DropStoredProcedures = 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'DROP PROCEDURE ' + S.name + N'.' + P.name + N';', N'') + @NewLineString\r\n                FROM\r\n                    sys.procedures     AS P\r\n                INNER JOIN sys.schemas AS S ON P.schema_id = S.schema_id;\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Drop sequences\r\n        **********************************************************************************************************************/\r\n        IF @DropSequences = 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'DROP SEQUENCE ' + S.name + N'.' + SQ.name + N';', N'') + @NewLineString\r\n                FROM\r\n                    sys.sequences      AS SQ\r\n                INNER JOIN sys.schemas AS S ON SQ.schema_id = S.schema_id;\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Drop synonyms\r\n        **********************************************************************************************************************/\r\n        IF @DropSynonyms = 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'DROP SYNONYM ' + S.name + N'.' + SY.name + N';', N'') + @NewLineString\r\n                FROM\r\n                    sys.synonyms       AS SY\r\n                INNER JOIN sys.schemas AS S ON SY.schema_id = S.schema_id;\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Drop tables\r\n        **********************************************************************************************************************/\r\n        IF @DropTables = 1\r\n            BEGIN\r\n\r\n                /* Drop all the foreign keys */\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + N'ALTER TABLE ' + (OBJECT_SCHEMA_NAME(parent_object_id)) + N'.' + QUOTENAME(OBJECT_NAME(parent_object_id)) + N' DROP CONSTRAINT' + QUOTENAME(name)\r\n                                    + N';' + @NewLineString\r\n                FROM\r\n                    sys.foreign_keys\r\n                ORDER BY\r\n                    OBJECT_SCHEMA_NAME(parent_object_id)\r\n                   ,OBJECT_NAME(parent_object_id);\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n\r\n                /* Drop all the tables */\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'DROP TABLE ' + SchemaName + N'.' + TableName + N';', N'') + @NewLineString\r\n                FROM\r\n                    #Table;\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Drop functions\r\n        **********************************************************************************************************************/\r\n        IF @DropFunctions = 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'DROP FUNCTION ' + S.name + N'.' + O.name + N';', N'') + @NewLineString\r\n                FROM\r\n                    sys.objects        AS O\r\n                INNER JOIN sys.schemas AS S ON O.schema_id = S.schema_id\r\n                WHERE\r\n                    O.type IN ('FN', 'IF', 'TF')\r\n                AND O.name NOT IN ('fn_diagramobjects');\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Drops user defined data and table types\r\n        **********************************************************************************************************************/\r\n        IF @DropUserDefinedDataTypes = 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'DROP TYPE ' + S.name + N'.' + T.name + N';', N'') + @NewLineString\r\n                FROM\r\n                    sys.types          AS T\r\n                INNER JOIN sys.schemas AS S ON T.schema_id = S.schema_id\r\n                WHERE\r\n                    T.is_user_defined = 1;\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Enable Temporal Table\r\n        **********************************************************************************************************************/\r\n        IF @DropTables <> 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement\r\n                                    + COALESCE(\r\n                                          N'ALTER TABLE ' + SchemaName + N'.' + TableName + N' SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = ' + TemporalSchemaName + N'.' + TemporalTableName + N'));'\r\n                                         ,N''\r\n                                      ) + @NewLineString\r\n                FROM\r\n                    #Table\r\n                WHERE\r\n                    IsTemporalTableFlag = 2;\r\n\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Enable all constraints on all tables\r\n        **********************************************************************************************************************/\r\n        IF @DropTables <> 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'ALTER TABLE ' + SchemaName + N'.' + TableName + N' WITH CHECK CHECK CONSTRAINT ALL;', N'') + @NewLineString\r\n                FROM\r\n                    #Table;\r\n\r\n                SET @SQLStatement = N'SET NOCOUNT ON; ' + @NewLineString + @SQLStatement;\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Enable all triggers on all tables\r\n        **********************************************************************************************************************/\r\n        IF @DropTables <> 1\r\n            BEGIN\r\n                SELECT\r\n                    @SQLStatement = @SQLStatement + COALESCE(N'ENABLE TRIGGER ALL ON ' + SchemaName + N'.' + TableName + N';', N'') + @NewLineString\r\n                FROM\r\n                    #Table;\r\n\r\n                SET @SQLStatement = N'SET NOCOUNT ON; ' + @NewLineString + @SQLStatement;\r\n                EXECUTE sys.sp_executesql @SQLStatement;\r\n                --PRINT @SQLStatement;\r\n                SET @SQLStatement = N'';\r\n            END;\r\n\r\n        /**********************************************************************************************************************\r\n        ** Reseed the identity columns seed value \r\n        **********************************************************************************************************************/\r\n        IF @DropTables <> 1\r\n            BEGIN\r\n                IF @ReseedTableIdentity = 1\r\n                    BEGIN\r\n                        SELECT\r\n                            @SQLStatement = @SQLStatement + COALESCE(N'DBCC CHECKIDENT(' + CHAR(39) + SCHEMA_NAME(T.schema_id) + N'.' + T.name + CHAR(39) + N', RESEED, 0);', N'') + @NewLineString\r\n                        FROM\r\n                            sys.columns                      AS C\r\n                        INNER JOIN sys.tables                AS T ON C.object_id  = T.object_id\r\n\r\n                        LEFT OUTER JOIN sys.identity_columns AS IC ON C.object_id = IC.object_id\r\n                        WHERE\r\n                            C.is_identity = 1\r\n                        AND IC.last_value IS NOT NULL;\r\n\r\n                        SET @SQLStatement = N'SET NOCOUNT ON; ' + @NewLineString + @SQLStatement;\r\n                        EXECUTE sys.sp_executesql @SQLStatement;\r\n                        --PRINT @SQLStatement;\r\n                        SET @SQLStatement = N'';\r\n                    END;\r\n            END;\r\n    END;"
}