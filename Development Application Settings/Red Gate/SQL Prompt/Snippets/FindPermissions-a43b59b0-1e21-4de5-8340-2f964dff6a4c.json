{
  "id": "a43b59b0-1e21-4de5-8340-2f964dff6a4c",
  "prefix": "FindPermissions",
  "description": "KM: SQL Server Permissions (Users, Roles, Securables)",
  "body": "/**********************************************************************************************************************\n** PowerShell to find the name of the server you're currently on:\n    hostname\n\n** PowerShell to check if the currently logged-in user is a member of a specific group:\n    whoami /groups | Where-Object {$_ -match \"[DOMAIN\\GROUPNAME]\"}\n\n** PowerShell to find information like the groups and privileges you belong to:\n    whoami /all\n\n** PowerShell to check if SQL Server port is open on a server:\n    Test-NetConnection -ComputerName \"[MySQLServerName]\" -Port 1433\n\n** PowerShell to check if an account has permisions to a network share:\n    net use \"[\\\\MyComputerName\\MyShareName]\" /user:[MyDomain\\MyUserName] [MyPa$$word* | or * to prompt for password]; net use \"[\\\\MyComputerName\\MyShareName]\" /delete\n**********************************************************************************************************************/\n\n/* General Information */\nSELECT\n    ServerName       = @@SERVERNAME\n   ,DatabaseUserName = USER_NAME()\n   ,LoginName        = SUSER_NAME()\n   ,[Is sysadmin]    = IIF(IS_SRVROLEMEMBER('sysadmin') = 1, 'True', 'False');\nGO\n\n/* My Server Roles */\nSELECT\n    ServerRole = SLR.name\nFROM\n    master.sys.server_role_members      AS SRM\nINNER JOIN master.sys.server_principals AS SP ON SRM.member_principal_id = SP.principal_id\nINNER JOIN master.sys.server_principals AS SLR ON SRM.role_principal_id  = SLR.principal_id\nWHERE\n    SP.name = SUSER_NAME()\nORDER BY\n    SP.name\n   ,SLR.name;\nGO\n\n/* My Securables */\nSELECT\n    PermissionName  = SP.permission_name\n   ,PermissionState = SP.state_desc\nFROM\n    master.sys.server_permissions       AS SP\nINNER JOIN master.sys.server_principals AS P ON SP.grantee_principal_id = P.principal_id\nWHERE\n    P.name = SUSER_NAME()\nORDER BY\n    SP.permission_name\n   ,SP.state_desc;\nGO\n\n/* My Granted Database Permissions */\nSELECT\n    PermissionName  = DP.permission_name\n   ,PermissionState = DP.state_desc\n   ,ObjectName      = O.name\n   ,ObjectType      = O.type_desc\nFROM\n    sys.database_permissions       AS DP\nLEFT JOIN sys.objects              AS O ON DP.major_id             = O.object_id\nINNER JOIN sys.database_principals AS P ON DP.grantee_principal_id = P.principal_id\nWHERE\n    P.name = USER_NAME()\nORDER BY\n    DP.permission_name\n   ,DP.state_desc;\nGO\n\n/* My Assigned Database Roles - User Mapping */\nSELECT\n    RoleName   = R.name\n   ,MemberName = M.name\nFROM\n    sys.database_role_members      AS DRM\nINNER JOIN sys.database_principals AS R ON DRM.role_principal_id   = R.principal_id\nINNER JOIN sys.database_principals AS M ON DRM.member_principal_id = M.principal_id\nWHERE\n    M.name = USER_NAME()\nORDER BY\n    R.name\n   ,M.name;\nGO\n\n/* My Schema-Level Permissions */\nSELECT\n    PermissionName  = DP.permission_name\n   ,PermissionState = DP.state_desc\n   ,SchemaName      = S.name\nFROM\n    sys.database_permissions AS DP\nJOIN sys.schemas             AS S ON DP.major_id             = S.schema_id\nJOIN sys.database_principals AS P ON DP.grantee_principal_id = P.principal_id\nWHERE\n    P.name = USER_NAME()\nORDER BY\n    DP.permission_name\n   ,DP.state_desc\n   ,S.name;\nGO\n\n/* All Database Users */\nSELECT\n    Username = name\n   ,type_desc\n   ,create_date\n   ,modify_date\nFROM\n    sys.database_principals\nWHERE\n    type_desc NOT IN ('DATABASE_ROLE')\nAND sid IS NOT NULL\nORDER BY\n    Username;\nGO\n\n/* All Role Members */\nSELECT\n    DatabaseRoleName = R.name\n   ,DatabaseUserName = ISNULL(U.name, 'No members')\nFROM\n    sys.database_principals         AS R\nLEFT JOIN sys.database_role_members AS M ON R.principal_id        = M.role_principal_id\nLEFT JOIN sys.database_principals   AS U ON M.member_principal_id = U.principal_id\nWHERE\n    R.type = 'R'\nORDER BY\n    R.name;\nGO\n\n/* All Logins (SQL and Windows) with Server Roles and Disabled Status */\nSELECT\n    LoginName   = SP.name\n   ,LoginType   = SP.type_desc\n   ,IsDisabled  = SP.is_disabled\n   ,ServerRoles = ISNULL(STUFF((\n                                   SELECT\n                                       ', ' + SR.name\n                                   FROM\n                                       sys.server_role_members AS SRM\n                                   JOIN sys.server_principals  AS SR ON SRM.role_principal_id = SR.principal_id\n                                   WHERE\n                                       SRM.member_principal_id = SP.principal_id\n                                   FOR XML PATH(''), TYPE\n                               ).value('.', 'NVARCHAR(MAX)')\n                            ,1\n                            ,2\n                            ,''\n                         )\n                     ,'No Roles'\n                  )\n   ,SP.create_date\n   ,SP.modify_date\nFROM\n    master.sys.server_principals         AS SP\nLEFT JOIN master.sys.server_role_members AS SRM ON SP.principal_id       = SRM.member_principal_id\nLEFT JOIN master.sys.server_principals   AS SRP ON SRM.role_principal_id = SRP.principal_id\nWHERE\n    SP.type_desc IN ('SQL_LOGIN', 'WINDOWS_LOGIN', 'WINDOWS_GROUP')\nORDER BY\n    LoginName;\nGO\n\n/* All Groups a User is Member of */\nEXECUTE master.sys.xp_logininfo @acctname = 'CORP\\WindowsUser', @option = 'all';\nGO\n\n/* All Users in Group */\nEXECUTE master.sys.xp_logininfo @acctname = 'CORP\\WindowsGroup', @option = 'members';\nGO\n\n/* List all Users and Users in Login Groups */\nDROP TABLE IF EXISTS #DomainAccount;\nCREATE TABLE #DomainAccount (\n    [account name]      sysname     NOT NULL\n   ,type                varchar(10) NOT NULL\n   ,privilege           varchar(10) NOT NULL\n   ,[mapped login name] sysname     NOT NULL\n   ,[permission path]   sysname     NOT NULL\n);\n\nDECLARE @GroupName sysname;\n\nDECLARE DomainGroups CURSOR LOCAL FAST_FORWARD FOR\n    SELECT name FROM master.sys.server_principals WHERE type = 'G' AND name NOT LIKE 'NT%';\n\nOPEN DomainGroups;\nFETCH NEXT FROM DomainGroups\nINTO\n    @GroupName;\n\nWHILE @@FETCH_STATUS = 0\n    BEGIN\n        INSERT INTO #DomainAccount ([account name], type, privilege, [mapped login name], [permission path])\n        EXEC master.sys.xp_logininfo @acctname = @GroupName, @option = 'members';\n        FETCH NEXT FROM DomainGroups\n        INTO\n            @GroupName;\n    END;\nCLOSE DomainGroups;\nDEALLOCATE DomainGroups;\n\nSELECT\n    [Mapped Login Name] = da.[mapped login name]\n   ,LoginName           = u.name\n   ,LoginType           = u.type_desc\n   ,RoleName            = r.name\n   ,AccountType         = da.type\nFROM\n    master.sys.server_principals          AS r\nINNER JOIN master.sys.server_role_members AS rm ON r.principal_id        = rm.role_principal_id\nINNER JOIN master.sys.server_principals   AS u ON rm.member_principal_id = u.principal_id\nLEFT JOIN #DomainAccount                  AS da ON u.name                = da.[permission path]\nWHERE\n    r.type = 'R'\nAND u.type <> 'R'\nORDER BY\n    da.[mapped login name]\n   ,r.principal_id\n   ,u.type_desc\n   ,u.name;\nGO\n\n/* All Role Permissions */\nSELECT\n    PrincipalName   = R.name\n   ,PrincipalType   = R.type_desc\n   ,GrantedBy       = ISNULL(G.name, 'System')\n   ,PermissionName  = P.permission_name\n   ,PermissionState = P.state_desc\n   ,ObjectName      = ISNULL(O.name, 'N/A')\n   ,ObjectType      = ISNULL(O.type_desc, 'N/A')\nFROM\n    sys.database_permissions      AS P\nLEFT JOIN sys.objects             AS O ON P.major_id             = O.object_id\nLEFT JOIN sys.database_principals AS R ON P.grantee_principal_id = R.principal_id\nLEFT JOIN sys.database_principals AS G ON P.grantor_principal_id = G.principal_id\nWHERE\n    R.type_desc = 'DATABASE_ROLE'\nAND R.name NOT IN ('public')\nORDER BY\n    R.name\n   ,P.permission_name;\nGO\n\n/* Stored Procedure Permissions */\nSELECT\n    SchemaName          = S.name\n   ,StoredProcedureName = O.name\n   ,PermissionState     = DP.state_desc\n   ,PermissionName      = DP.permission_name\n   ,GranteeName         = P.name\nFROM\n    sys.database_permissions      AS DP\nINNER JOIN sys.objects            AS O ON DP.major_id             = O.object_id\nINNER JOIN sys.schemas            AS S ON O.schema_id             = S.schema_id\nLEFT JOIN sys.database_principals AS P ON DP.grantee_principal_id = P.principal_id\nWHERE\n    O.type = 'P'\nORDER BY\n    SchemaName\n   ,StoredProcedureName\n   ,GranteeName\n   ,PermissionName;\nGO\n\n/* Schema Permissions */\nSELECT\n    SchemaName      = S.name\n   ,PermissionState = DP.state_desc\n   ,PermissionName  = DP.permission_name\n   ,UserName        = U.name\nFROM\n    sys.database_permissions      AS DP\nLEFT JOIN sys.objects             AS O ON DP.major_id             = O.object_id\nLEFT JOIN sys.schemas             AS S ON DP.major_id             = S.schema_id\nLEFT JOIN sys.database_principals AS U ON DP.grantee_principal_id = U.principal_id\nWHERE\n    DP.class_desc = 'SCHEMA'\nORDER BY\n    SchemaName\n   ,PermissionName\n   ,UserName;\nGO\n\n/* Schema, Object, or Column Permission */\nSELECT\n    Permission     = 'GRANT'\n   ,PermissionName = +perm.permission_name\n   ,Class          = perm.class_desc\n   ,ObjectName     = CASE perm.class_desc\n                         WHEN 'SCHEMA'\n                             THEN SCHEMA_NAME(perm.major_id)\n                         WHEN 'OBJECT_OR_COLUMN'\n                             THEN CASE WHEN perm.minor_id = 0\n                                           THEN OBJECT_NAME(perm.major_id)\n                                      ELSE (\n                                      SELECT name FROM sys.columns WHERE object_id = perm.major_id AND column_id = perm.minor_id\n                                  )\n                                  END\n                         ELSE 'other'\n                     END\n   ,ColumnName     = CASE WHEN perm.class_desc = 'OBJECT_OR_COLUMN'\n                          AND perm.minor_id > 0\n                              THEN (\n                              SELECT name FROM sys.columns WHERE object_id = perm.major_id AND column_id = perm.minor_id\n                          )\n                         ELSE NULL\n                     END\n   ,GrantedTo      = prin.name\nFROM\n    sys.database_permissions       AS perm\nINNER JOIN sys.database_principals AS prin ON perm.grantee_principal_id = prin.principal_id\nLEFT JOIN sys.objects              AS o ON o.object_id                  = perm.major_id\nWHERE\n    perm.major_id > 0\nAND perm.permission_name IN ('SELECT', 'INSERT', 'UPDATE', 'DELETE');\nGO\n\n/* Table & View Permissions */\nSELECT\n    SchemaName      = S.name\n   ,ObjectName      = O.name\n   ,ObjectType      = O.type_desc\n   ,UserName        = U.name\n   ,PermissionState = DP.state_desc\n   ,PermissionName  = DP.permission_name\nFROM\n    sys.database_permissions      AS DP\nLEFT JOIN sys.objects             AS O ON DP.major_id             = O.object_id\nLEFT JOIN sys.schemas             AS S ON O.schema_id             = S.schema_id\nLEFT JOIN sys.database_principals AS U ON DP.grantee_principal_id = U.principal_id\nWHERE\n    O.type IN ('U', 'V')\nAND DP.class_desc = 'OBJECT_OR_COLUMN'\nAND U.name NOT IN ('public')\nORDER BY\n    SchemaName\n   ,ObjectName\n   ,UserName\n   ,PermissionName\n   ,PermissionState;\nGO"
}