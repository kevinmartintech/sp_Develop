{
  "id": "a132001f-c85e-43d0-abdb-99a08847aaa1",
  "prefix": "FindRemovePlanCache",
  "description": "KM: Remove Plan Cache (DBCC FREEPROCCACHE)",
  "body": "RETURN; /* This is here so the entire script is not run accidentially */\r\n\r\n\r\n\r\n/* ##############################################################################################################\r\n    This is the surgical option that clears only the one bad plan\r\n\r\n    1. Use the query below to search for the stored procedure name or some of the query text in the WHERE clause.\r\n    2. Determine the correct result row based on the 'Query Text' returned.\r\n    3. [Optional] Click on the 'Query Plan' column and save the execution plan to compare with the new cached \r\n        plan for analysis.\r\n    4. Copy the 'Remove Plan Handle From Cache' column in the results window for the cached execution plan.\r\n    5. Paste the 'Remove Plan Handle From Cache' column in execute.\r\n################################################################################################################# */\r\n\r\nSELECT\r\n    [Query Text]                    = st.text\r\n   ,[Query Plan]                    = qp.query_plan\r\n   ,[Remove Plan Handle From Cache] = 'DBCC FREEPROCCACHE (' + CONVERT(varchar(128), cp.plan_handle, 1) + ');'\r\nFROM\r\n    sys.dm_exec_cached_plans                     AS cp\r\nCROSS APPLY sys.dm_exec_sql_text(cp.plan_handle) AS st\r\nCROSS APPLY sys.dm_exec_query_plan(cp.plan_handle) AS qp\r\nWHERE\r\n    st.text LIKE N'%[STORED-PROCEDURE-NAME-OR-QUERY-TEXT]%'; /* Example: st.text LIKE N'%va_usp_GetAccountDetail%' */\r\n\r\n\r\n\r\n/* ##############################################################################################################\r\n    This is the atom bomb option that clears all plans from the plan cache\r\n\r\n    * Clearing the entire procedure (plan) cache causes all plans to be evicted out of memory, and incoming query \r\n       executions will compile a new plan, instead of reusing any previously cached plan. This can cause a \r\n       sudden, temporary decrease in query performance as the number of new compilations increases. \r\n    * Using the nuclear option opens up the SQL Server to cache \"bad\" execution plan based on the first \r\n       query parameters that are used for each query.\r\n    * Utilizing DBCC FREEPROCCACHE in a production environment should be infrequent, as it is typically \r\n       only employed as a troubleshooting method when SQL Server encounters severe issues.\r\n ################################################################################################################# */\r\n\r\n/*\r\nDBCC FREEPROCCACHE;\r\nGO\r\n*/\r\n\r\n/* ##############################################################################################################\r\n    This is the nuclear option that clears all plans from the plan cache, and cached data pages.\r\n\r\n    * Use DBCC DROPCLEANBUFFERS to test queries with a cold buffer cache without shutting down and restarting the server.\r\n    * Clearing the entire procedure (plan) cache causes all plans to be evicted out of memory, and incoming query \r\n       executions will compile a new plan, instead of reusing any previously cached plan. This can cause a \r\n       sudden, temporary decrease in query performance as the number of new compilations increases. \r\n    * Using the nuclear option opens up the SQL Server to cache \"bad\" execution plan based on the first \r\n       query parameters that are used for each query.\r\n    * Utilizing DBCC FREEPROCCACHE in a production environment should be infrequent, as it is typically \r\n       only employed as a troubleshooting method when SQL Server encounters severe issues.\r\n ################################################################################################################# */\r\n\r\n/* \r\nCHECKPOINT;\r\nGO\r\nDBCC DROPCLEANBUFFERS;\r\nGO\r\n*/"
}